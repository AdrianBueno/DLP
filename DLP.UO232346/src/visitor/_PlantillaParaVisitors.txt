/**
 * @generated VGen 1.3.3
 */

// package <nombre paquete>;

import ast.*;

/*
Plantilla para Visitors.
Para crear un nuevo Visitor cortar y pegar este código y ya se tendrá un visitor que compila y 
que al ejecutarlo recorrerá todo el árbol (sin hacer nada aún en él).
Solo quedará añadir a cada método visit aquello adicional que tenga que realizar sobre su nodo del AST.
*/

public class <nombre clase> extends DefaultVisitor {

	// ---------------------------------------------------------
	// Tareas a realizar en cada método visit:
	//
	// Si en algún método visit NO SE QUIERE HACER NADA más que recorrer los hijos entonces se puede 
	// borrar (dicho método se heredará de DefaultVisitor con el código de recorrido).
	//
	// Lo siguiente es para cuando se quiera AÑADIR alguna funcionalidad adicional a un visit:
	//
	// - El código que aparece en cada método visit es aquel que recorre los hijos. Es el mismo código
	//		que está implementado en el padre (DefaultVisitor). Por tanto la llamada a 'super.visit' y el
	//		resto del código del método hacen lo mismo (por ello 'super.visit' está comentado).
	//
	// - Lo HABITUAL será borrar todo el código de recorrido dejando solo la llamada a 'super.visit'. De esta
	//		manera cada método visit se puede centrar en la tarea que tiene que realizar sobre su nodo del AST.
	//
	// - La razón de que aparezca el código de recorrido de los hijos es por si se necesita realizar alguna
	//		tarea DURANTE el mismo (por ejemplo ir comprobando su tipo). En este caso ya se tiene implementado
	//		dicho recorrido y solo habrá que incrustar las acciones adicionales en el mismo. En este caso
	//		la llamada a 'super.visit' deberá ser borrada.
	// ---------------------------------------------------------


	//	class Programa { List<Declaracion> declaraciones; }
	public Object visit(Programa node, Object param) {

		// super.visit(node, param);

		if (node.getDeclaraciones() != null)
			for (Declaracion child : node.getDeclaraciones())
				child.accept(this, param);

		return null;
	}

	//	class DefVariable { String nombre;  Tipo tipo; }
	public Object visit(DefVariable node, Object param) {

		// super.visit(node, param);

		if (node.getTipo() != null)
			node.getTipo().accept(this, param);

		return null;
	}

	//	class DefStruct { String nombre;  List<DefCampo> listaCampos; }
	public Object visit(DefStruct node, Object param) {

		// super.visit(node, param);

		if (node.getListaCampos() != null)
			for (DefCampo child : node.getListaCampos())
				child.accept(this, param);

		return null;
	}

	//	class DefFuncion { String nombre;  List<DefVariable> listaParametros;  Tipo tipo;  List<DefVariable> listaDeclaraciones;  List<Sentencia> listaSentencias; }
	public Object visit(DefFuncion node, Object param) {

		// super.visit(node, param);

		if (node.getListaParametros() != null)
			for (DefVariable child : node.getListaParametros())
				child.accept(this, param);

		if (node.getTipo() != null)
			node.getTipo().accept(this, param);

		if (node.getListaDeclaraciones() != null)
			for (DefVariable child : node.getListaDeclaraciones())
				child.accept(this, param);

		if (node.getListaSentencias() != null)
			for (Sentencia child : node.getListaSentencias())
				child.accept(this, param);

		return null;
	}

	//	class DefCampo { String nombre;  Tipo tipo; }
	public Object visit(DefCampo node, Object param) {

		// super.visit(node, param);

		if (node.getTipo() != null)
			node.getTipo().accept(this, param);

		return null;
	}

	//	class Invocacion { String nombre;  List<Expresion> listaArgumentos; }
	public Object visit(Invocacion node, Object param) {

		// super.visit(node, param);

		if (node.getListaArgumentos() != null)
			for (Expresion child : node.getListaArgumentos())
				child.accept(this, param);

		return null;
	}

	//	class Asignacion { Expresion left;  Expresion right; }
	public Object visit(Asignacion node, Object param) {

		// super.visit(node, param);

		if (node.getLeft() != null)
			node.getLeft().accept(this, param);

		if (node.getRight() != null)
			node.getRight().accept(this, param);

		return null;
	}

	//	class SentenciaPrint { Expresion expresion; }
	public Object visit(SentenciaPrint node, Object param) {

		// super.visit(node, param);

		if (node.getExpresion() != null)
			node.getExpresion().accept(this, param);

		return null;
	}

	//	class SentenciaPrintSp { Expresion expresion; }
	public Object visit(SentenciaPrintSp node, Object param) {

		// super.visit(node, param);

		if (node.getExpresion() != null)
			node.getExpresion().accept(this, param);

		return null;
	}

	//	class SentenciaPrintLn { Expresion expresion; }
	public Object visit(SentenciaPrintLn node, Object param) {

		// super.visit(node, param);

		if (node.getExpresion() != null)
			node.getExpresion().accept(this, param);

		return null;
	}

	//	class SentenciaRead { Expresion expresion; }
	public Object visit(SentenciaRead node, Object param) {

		// super.visit(node, param);

		if (node.getExpresion() != null)
			node.getExpresion().accept(this, param);

		return null;
	}

	//	class SentenciaIf { Expresion condicion;  List<Sentencia> sentenciasIf;  List<Sentencia> sentenciasElse; }
	public Object visit(SentenciaIf node, Object param) {

		// super.visit(node, param);

		if (node.getCondicion() != null)
			node.getCondicion().accept(this, param);

		if (node.getSentenciasIf() != null)
			for (Sentencia child : node.getSentenciasIf())
				child.accept(this, param);

		if (node.getSentenciasElse() != null)
			for (Sentencia child : node.getSentenciasElse())
				child.accept(this, param);

		return null;
	}

	//	class SentenciaWhile { Expresion condicion;  List<Sentencia> sentencias; }
	public Object visit(SentenciaWhile node, Object param) {

		// super.visit(node, param);

		if (node.getCondicion() != null)
			node.getCondicion().accept(this, param);

		if (node.getSentencias() != null)
			for (Sentencia child : node.getSentencias())
				child.accept(this, param);

		return null;
	}

	//	class SentenciaReturn { Expresion retorno; }
	public Object visit(SentenciaReturn node, Object param) {

		// super.visit(node, param);

		if (node.getRetorno() != null)
			node.getRetorno().accept(this, param);

		return null;
	}

	//	class ExBinaria {  }
	public Object visit(ExBinaria node, Object param) {
		return null;
	}

	//	class ExAritmetica { Expresion left;  String operador;  Expresion right; }
	public Object visit(ExAritmetica node, Object param) {

		// super.visit(node, param);

		if (node.getLeft() != null)
			node.getLeft().accept(this, param);

		if (node.getRight() != null)
			node.getRight().accept(this, param);

		return null;
	}

	//	class ExLogica { Expresion left;  String operador;  Expresion right; }
	public Object visit(ExLogica node, Object param) {

		// super.visit(node, param);

		if (node.getLeft() != null)
			node.getLeft().accept(this, param);

		if (node.getRight() != null)
			node.getRight().accept(this, param);

		return null;
	}

	//	class ExRelacional { Expresion left;  String operador;  Expresion right; }
	public Object visit(ExRelacional node, Object param) {

		// super.visit(node, param);

		if (node.getLeft() != null)
			node.getLeft().accept(this, param);

		if (node.getRight() != null)
			node.getRight().accept(this, param);

		return null;
	}

	//	class ExNot { Expresion expresion; }
	public Object visit(ExNot node, Object param) {

		// super.visit(node, param);

		if (node.getExpresion() != null)
			node.getExpresion().accept(this, param);

		return null;
	}

	//	class ExInvocacion { String nombre;  List<Expresion> listaArgumentos; }
	public Object visit(ExInvocacion node, Object param) {

		// super.visit(node, param);

		if (node.getListaArgumentos() != null)
			for (Expresion child : node.getListaArgumentos())
				child.accept(this, param);

		return null;
	}

	//	class ExIndice { Expresion left;  Expresion indice; }
	public Object visit(ExIndice node, Object param) {

		// super.visit(node, param);

		if (node.getLeft() != null)
			node.getLeft().accept(this, param);

		if (node.getIndice() != null)
			node.getIndice().accept(this, param);

		return null;
	}

	//	class ExCampo { Expresion left;  Expresion campo; }
	public Object visit(ExCampo node, Object param) {

		// super.visit(node, param);

		if (node.getLeft() != null)
			node.getLeft().accept(this, param);

		if (node.getCampo() != null)
			node.getCampo().accept(this, param);

		return null;
	}

	//	class ExCast { Tipo tipo;  Expresion cast; }
	public Object visit(ExCast node, Object param) {

		// super.visit(node, param);

		if (node.getTipo() != null)
			node.getTipo().accept(this, param);

		if (node.getCast() != null)
			node.getCast().accept(this, param);

		return null;
	}

	//	class LitEntero { String valor; }
	public Object visit(LitEntero node, Object param) {
		return null;
	}

	//	class LitReal { String valor; }
	public Object visit(LitReal node, Object param) {
		return null;
	}

	//	class LitCaracter { String valor; }
	public Object visit(LitCaracter node, Object param) {
		return null;
	}

	//	class Variable { String nombre; }
	public Object visit(Variable node, Object param) {
		return null;
	}

	//	class TipoEntero {  }
	public Object visit(TipoEntero node, Object param) {
		return null;
	}

	//	class TipoReal {  }
	public Object visit(TipoReal node, Object param) {
		return null;
	}

	//	class TipoCaracter {  }
	public Object visit(TipoCaracter node, Object param) {
		return null;
	}

	//	class TipoVariable { String nombre; }
	public Object visit(TipoVariable node, Object param) {
		return null;
	}

	//	class TipoArray { Tipo tipo;  String tamaño; }
	public Object visit(TipoArray node, Object param) {

		// super.visit(node, param);

		if (node.getTipo() != null)
			node.getTipo().accept(this, param);

		return null;
	}

	//	class TipoVoid {  }
	public Object visit(TipoVoid node, Object param) {
		return null;
	}
}
